ATIVIDADE I - N1

Professor: Luiz Carlos Camargo
Alunos: Francisco Marcelo Caetano Costa e Lucas Grimes Ceola


Requisitos Funcionais (RF)
‚Ä¢	RF001: O sistema deve permitir o cadastro de jogos com nome, plataforma, g√™nero e estado do jogo (ex.: novo, usado, dispon√≠vel, emprestado,
  vendido).
‚Ä¢	RF002: O sistema deve permitir a listagem de todos os jogos cadastrados, exibindo suas informa√ß√µes.
‚Ä¢	RF003: O sistema deve permitir a atualiza√ß√£o das informa√ß√µes de um jogo incluindo altera√ß√£o do estado do jogo.
‚Ä¢	RF004: O sistema deve permitir a exclus√£o de um jogo do invent√°rio.
‚Ä¢	RF005: O sistema deve permitir registrar o empr√©stimo de um jogo, alterando seu estado para ‚Äúemprestado‚Äù e registrando a data e o nome da 
  pessoa que pegou emprestado.
‚Ä¢	RF006: O sistema deve permitir registrar a venda de um jogo, alterando seu estado para ‚Äúvendido‚Äù e registrando a data e o nome da pessoa 
  que pegou emprestado.
‚Ä¢	RF007: O sistema deve impedir o retorno de um jogo que j√° esteve marcado como ‚Äúvendido‚Äù.
‚Ä¢	RF008: O sistema deve permitir o retorno de um jogo emprestado, alterando seu estado para ‚Äúdispon√≠vel‚Äù.
‚Ä¢	RF009: O sistema deve permitir buscar jogos por nome, plataforma ou g√™nero.



Requisitos N√£o-Funcionais (RNF)
‚Ä¢	RNF001: O sistema deve ser acess√≠vel via navegador web e responsivo para dispositivos m√≥veis.
‚Ä¢	RNF002: O sistema deve armazenar os dados dos jogos e transa√ß√µes em um banco de dados relacional.
‚Ä¢	RNF003: O tempo de resposta para exibi√ß√£o da lista de jogos deve ser inferior a 2 segundos.
‚Ä¢	RNF004: O sistema deve implementar a autentica√ß√£o para proteger as informa√ß√µes dos usu√°rios.
‚Ä¢	*RNF005: O sistema deve utilizar criptografia para armazenar dados sens√≠veis.


Apresentar as estrat√©gias de desenvolvimento, tipo de arquitetura (monol√≠tico ou microservice) e ratificar as tecnologias escolhidas, 
justificando as escolhas:

O desenvolvimento do Sistema de Invent√°rio de V√≠deo Games permitir√° a entrega cont√≠nua de todas as funcionalidades estabelecidas. 
O foco ser√° na experi√™ncia do usu√°rio e na efici√™ncia da manipula√ß√£o dos dados. A aplica√ß√£o adotar√° uma arquitetura monol√≠tica inicialmente,
pois o escopo do sistema n√£o exige alta escalabilidade e facilita o desenvolvimento, testes e manuten√ß√£o. No futuro, se necess√°rio, a 
aplica√ß√£o poder√° ser trocada para uma arquitetura baseada em micro servi√ßos.

React: Escolhido para o front-end por sua integra√ß√£o nativa com JavaScript, facilitando o desenvolvimento. Al√©m disso, 
√© uma nova tecnologia para explorarmos e aprimorarmos nossas habilidades. 
JavaScript: No back-end, foi escolhido por sua compatibilidade com React e por ser a linguagem com a qual temos mais familiaridade. 
MySQL: Utilizado devido ao nosso maior conhecimento na tecnologia, garantindo efici√™ncia no gerenciamento dos dados.

Apresentar um plano de trabalho (atividades/responsabilidades), principalmente em dupla:

- Planejamento e Defini√ß√£o do Projeto (Semanas 1-2)
Definir requisitos e regras de neg√≥cio.
Estruturar o banco de dados.
Especificar funcionalidades do sistema.

- Desenvolvimento do Back-end (Semanas 3-4)
Criar a API com Node.js.
Implementar opera√ß√µes CRUD para jogos.
Desenvolver endpoints para transa√ß√µes (empr√©stimo e venda).
Testar conex√µes com o banco MySQL.
üîπ Responsabilidade compartilhada

- Desenvolvimento do Front-end (Semanas 5-6)
Criar estrutura do projeto React.
Desenvolver telas principais (listagem, cadastro, edi√ß√£o).
Conectar front-end com a API.
üîπ Responsabilidade compartilhada

 - Testes e Ajustes Finais (Semana 7)
Testar fluxo de navega√ß√£o e comunica√ß√£o entre front-end e back-end.
Corrigir poss√≠veis erros.
üîπ Responsabilidade compartilhada
